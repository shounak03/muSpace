// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")

//   directUrl = env("DATABASE_URL_UNPOOLED")
// }

// generator client {
//   provider = "prisma-client-js"
// }

// enum UserRole {
//   ADMIN
//   USER
// }

// enum Provider {
//   Google
//   Credentials
// }

// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime?
//   role          UserRole  @default(USER)
//   password      String?
//   image         String?
//   provider      Provider?
//   googleId      String?
//   accounts      Account[]
//   hostedSpaces  Space[]   @relation("hostedBy")
//   votes         Vote[]
//   song          Song[]    @relation("user")
//   addedSongs    Song[]    @relation("addedBy")
//   sessions      Session[]
//   createdAt     DateTime  @default(now())
//   updatedAt     DateTime  @updatedAt
// }

// model Account {
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String?
//   access_token      String?
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String?
//   session_state     String?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@id([provider, providerAccountId])
// }

// model Space {
//   id          String       @id @default(cuid())
//   name        String
//   description String
//   url         String       @unique @default("")
//   hostId      String
//   host        User         @relation("hostedBy", fields: [hostId], references: [id])
//   songs       Song[]
//   currentSong CurrentSong?
//   createdAt   DateTime     @default(now())
//   updatedAt   DateTime     @updatedAt
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique @map("session_token")
//   userId       String   @map("user_id")
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@map("sessions")
// }

// model Song {
//   id            String       @id @default(cuid())
//   url           String
//   extractedId   String
//   title         String?
//   bigImg        String?
//   smallImg      String?
//   artist        String?
//   duration      Int?
//   active        Boolean      @default(false)
//   currentStream CurrentSong?
//   played        Boolean      @default(false)
//   playedTs      DateTime?
//   spaceId       String
//   space         Space        @relation(fields: [spaceId], references: [id])
//   userId        String
//   addedBy       String
//   addedByUser   User         @relation("addedBy", fields: [addedBy], references: [id])
//   user          User         @relation(fields: [userId], references: [id], name: "user")
//   createdAt     DateTime     @default(now())
//   updatedAt     DateTime     @updatedAt
//   votes         Vote[]
// }

// model CurrentSong {
//   id      String  @id @default(uuid())
//   userId  String
//   songId  String? @unique
//   song    Song?   @relation(fields: [songId], references: [id])
//   spaceId String? @unique
//   space   Space?  @relation(fields: [spaceId], references: [id], onDelete: Cascade)
// }

// model Vote {
//   id     String @id @default(cuid())
//   userId String
//   songId String
//   user   User   @relation(fields: [userId], references: [id])
//   song   Song   @relation(fields: [songId], references: [id])

//   @@unique([userId, songId])
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

  directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum Provider {
  Google
  Credentials
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  role          UserRole  @default(USER)
  password      String?
  image         String?
  provider      Provider?
  googleId      String?
  accounts      Account[]
  hostedSpaces  Space[]   @relation("hostedBy")
  votes         Vote[]
  song          Song[]    @relation("user")
  addedSongs    Song[]    @relation("addedBy")
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  messages      Message[] // Added messages relation
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Space {
  id          String       @id @default(cuid())
  name        String
  description String
  url         String       @unique @default("")
  hostId      String
  host        User         @relation("hostedBy", fields: [hostId], references: [id])
  songs       Song[]
  currentSong CurrentSong?
  messages    Message[]    // Added messages relation
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  spaceId   String
  space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Song {
  id            String       @id @default(cuid())
  url           String
  extractedId   String
  title         String?
  bigImg        String?
  smallImg      String?
  artist        String?
  duration      Int?
  active        Boolean      @default(false)
  currentStream CurrentSong?
  played        Boolean      @default(false)
  playedTs      DateTime?
  spaceId       String
  space         Space        @relation(fields: [spaceId], references: [id])
  userId        String
  addedBy       String
  addedByUser   User         @relation("addedBy", fields: [addedBy], references: [id])
  user          User         @relation(fields: [userId], references: [id], name: "user")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  votes         Vote[]
}

model CurrentSong {
  id      String  @id @default(uuid())
  userId  String
  songId  String? @unique
  song    Song?   @relation(fields: [songId], references: [id])
  spaceId String? @unique
  space   Space?  @relation(fields: [spaceId], references: [id], onDelete: Cascade)
}

model Vote {
  id     String @id @default(cuid())
  userId String
  songId String
  user   User   @relation(fields: [userId], references: [id])
  song   Song   @relation(fields: [songId], references: [id])

  @@unique([userId, songId])
}
