// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum Provider {
  Google
  Credentials
}

model User {
  id           String    @id @default(cuid())
  username     String?   @unique
  email        String?   @unique
  password     String?
  image        String?
  provider     Provider?
  role         UserRole  @default(USER)
  accounts     Account[]
  hostedSpaces Space[]   @relation("hostedBy")
  votes        Vote[]
  song         Song[]    @relation("user")
  addedSongs   Song[]    @relation("addedBy")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Space {
  id          String @id @default(cuid())
  name        String
  description String
  privateKey  String
  url         String @unique @default("")
  hostId      String
  host        User   @relation("hostedBy", fields: [hostId], references: [id])
  songs       Song[]

  currentSong CurrentSong?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Song {
  id            String       @id @default(cuid())
  url           String
  extractedId   String
  title         String?
  bigImg        String?
  smallImg      String?
  artist        String?
  duration      Int?
  active        Boolean      @default(false)
  currentStream CurrentSong?
  played        Boolean      @default(false)
  playedTs      DateTime?
  spaceId       String
  space         Space        @relation(fields: [spaceId], references: [id])
  userId        String
  addedBy       String
  addedByUser   User         @relation("addedBy", fields: [addedBy], references: [id])
  user          User         @relation(fields: [userId], references: [id], name: "user")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  votes         Vote[]
}

model CurrentSong {
  id       String  @id @default(uuid())
  userId   String
  streamId String? @unique
  song     Song?   @relation(fields: [streamId], references: [id])
  spaceId  String? @unique
  space    Space?  @relation(fields: [spaceId], references: [id], onDelete: Cascade)
}

model Vote {
  id     String @id @default(cuid())
  userId String
  songId String
  user   User   @relation(fields: [userId], references: [id])
  song   Song   @relation(fields: [songId], references: [id])

  @@unique([userId, songId])
}
